// prisma/schema.prisma

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model Product {
  id                          Int       @id @default(autoincrement())
  languageType                String
  category                    String
  title                       String
  referenceCode               String
  images                      Image[]  // Array of image URLs
  shortDescription            String
  description                 String
  summarize                   Summarize[]
  location                    Location[]
  productKeywords             Keyword[]
  architectureType            ArchitectureType[]
  artAndExhibits              ArtExhibit[]
  inclusionService            InclusionService[]
  exclusionService            ExclusionService[]
  isFoodIncluded              Boolean   @default(false)
  isTransportIncluded         Boolean   @default(false)
  notSuitable                 NotSuitable[]
  notAllowed                  NotAllowed[]
  mustCarryItems              MustCarryItem[]
  bookingInformation          String    // Information for booking
  emergencyContacts           EmergencyContact[]
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String   
  productId Int      
  Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Summarize {
  id          Int      @id @default(autoincrement())
  description String
  productId   Int      
  Product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Location {
  id          Int      @id @default(autoincrement())
  address     String
  productId   Int     
  Product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Keyword {
  id          Int      @id @default(autoincrement())
  keyword     String
  productId   Int      
  Product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ArchitectureType {
  id          Int      @id @default(autoincrement())
  type        String
  productId   Int     
  Product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ArtExhibit {
  id          Int      @id @default(autoincrement())
  exhibit     String
  productId   Int     
  Product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model InclusionService {
  id          Int      @id @default(autoincrement())
  service     String
  productId   Int     
  Product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ExclusionService {
  id          Int      @id @default(autoincrement())
  service     String
  productId   Int     
  Product     Product  @relation(fields: [productId], references: [id])
}


model NotSuitable {
  id          Int      @id @default(autoincrement())
  condition   String
  productId   Int      
  Product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model NotAllowed {
  id          Int      @id @default(autoincrement())
  restriction String
  productId   Int      
  Product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model MustCarryItem {
  id          Int      @id @default(autoincrement())
  item        String
  productId   Int     
  Product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model EmergencyContact {
  id          Int      @id @default(autoincrement())
  contact     String   // Emergency contact details
  productId   Int      
  Product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}
